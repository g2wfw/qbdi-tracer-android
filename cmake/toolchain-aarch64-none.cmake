set(CMAKE_SYSTEM_NAME none)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
# Specify the cross compiler

macro(init_aarch64_toolchain toolchain_path)
    set(CMAKE_SYSTEM_NAME AArch64)
    set(CMAKE_SYSTEM_PROCESSOR none)
    if (NOT EXISTS ${toolchain_path})
        message(FATAL_ERROR "-- ${toolchain_path} not exists")
    endif ()
    set(CMAKE_C_COMPILER ${toolchain_path}/bin/aarch64-none-elf-gcc)
    set(CMAKE_CXX_COMPILER ${toolchain_path}/bin/aarch64-none-elf-g++)
    set(CMAKE_ASM_COMPILER ${toolchain_path}/bin/aarch64-none-elf-gcc)
    set(CMAKE_LINKER ${toolchain_path}/bin/aarch64-none-elf-ld)
    set(CMAKE_AR ${toolchain_path}/bin/aarch64-none-elf-ar)
    set(CMAKE_OBJCOPY ${toolchain_path}/bin/aarch64-none-elf-objcopy)
    set(CMAKE_OBJDUMP ${toolchain_path}/bin/aarch64-none-elf-objdump)
    set(CMAKE_SIZE ${toolchain_path}/bin/aarch64-none-elf-size)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffunction-sections -fdata-sections")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffunction-sections -fdata-sections")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -nostdlib -nostartfiles -nodefaultlibs")
    enable_language(C)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -r")
endmacro()

macro(unite_build_output)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/)
endmacro()
